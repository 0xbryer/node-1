// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/datacenter/datacenter.proto

/*
Package datacenter is a generated protocol buffer package.

It is generated from these files:
	api/datacenter/datacenter.proto

It has these top-level messages:
	DeploymentCreateRequest
	DeploymentCreateResponse
	DeploymentUpdateRequest
	DeploymentUpdateResponse
	DeploymentStatusRequest
	DeploymentStatusResponse
	DeploymentEventsRequest
	DeploymentEvent
	DeploymentDeleteRequest
	DeploymentDeleteResponse
	DeploymentListRequest
	DeploymentListResponse
	Deployment
*/
package datacenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeploymentCreateRequest struct {
}

func (m *DeploymentCreateRequest) Reset()                    { *m = DeploymentCreateRequest{} }
func (m *DeploymentCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*DeploymentCreateRequest) ProtoMessage()               {}
func (*DeploymentCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DeploymentCreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentCreateResponse) Reset()                    { *m = DeploymentCreateResponse{} }
func (m *DeploymentCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*DeploymentCreateResponse) ProtoMessage()               {}
func (*DeploymentCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeploymentCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentUpdateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentUpdateRequest) Reset()                    { *m = DeploymentUpdateRequest{} }
func (m *DeploymentUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*DeploymentUpdateRequest) ProtoMessage()               {}
func (*DeploymentUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeploymentUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentUpdateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentUpdateResponse) Reset()                    { *m = DeploymentUpdateResponse{} }
func (m *DeploymentUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*DeploymentUpdateResponse) ProtoMessage()               {}
func (*DeploymentUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeploymentUpdateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentStatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentStatusRequest) Reset()                    { *m = DeploymentStatusRequest{} }
func (m *DeploymentStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*DeploymentStatusRequest) ProtoMessage()               {}
func (*DeploymentStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeploymentStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentStatusResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentStatusResponse) Reset()                    { *m = DeploymentStatusResponse{} }
func (m *DeploymentStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*DeploymentStatusResponse) ProtoMessage()               {}
func (*DeploymentStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeploymentStatusResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentEventsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentEventsRequest) Reset()                    { *m = DeploymentEventsRequest{} }
func (m *DeploymentEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeploymentEventsRequest) ProtoMessage()               {}
func (*DeploymentEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeploymentEventsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentEvent struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentEvent) Reset()                    { *m = DeploymentEvent{} }
func (m *DeploymentEvent) String() string            { return proto.CompactTextString(m) }
func (*DeploymentEvent) ProtoMessage()               {}
func (*DeploymentEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeploymentEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentDeleteRequest) Reset()                    { *m = DeploymentDeleteRequest{} }
func (m *DeploymentDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeploymentDeleteRequest) ProtoMessage()               {}
func (*DeploymentDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeploymentDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentDeleteResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeploymentDeleteResponse) Reset()                    { *m = DeploymentDeleteResponse{} }
func (m *DeploymentDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeploymentDeleteResponse) ProtoMessage()               {}
func (*DeploymentDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeploymentDeleteResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeploymentListRequest struct {
}

func (m *DeploymentListRequest) Reset()                    { *m = DeploymentListRequest{} }
func (m *DeploymentListRequest) String() string            { return proto.CompactTextString(m) }
func (*DeploymentListRequest) ProtoMessage()               {}
func (*DeploymentListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type DeploymentListResponse struct {
	Items []*Deployment `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *DeploymentListResponse) Reset()                    { *m = DeploymentListResponse{} }
func (m *DeploymentListResponse) String() string            { return proto.CompactTextString(m) }
func (*DeploymentListResponse) ProtoMessage()               {}
func (*DeploymentListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeploymentListResponse) GetItems() []*Deployment {
	if m != nil {
		return m.Items
	}
	return nil
}

type Deployment struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Deployment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deployment) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*DeploymentCreateRequest)(nil), "DeploymentCreateRequest")
	proto.RegisterType((*DeploymentCreateResponse)(nil), "DeploymentCreateResponse")
	proto.RegisterType((*DeploymentUpdateRequest)(nil), "DeploymentUpdateRequest")
	proto.RegisterType((*DeploymentUpdateResponse)(nil), "DeploymentUpdateResponse")
	proto.RegisterType((*DeploymentStatusRequest)(nil), "DeploymentStatusRequest")
	proto.RegisterType((*DeploymentStatusResponse)(nil), "DeploymentStatusResponse")
	proto.RegisterType((*DeploymentEventsRequest)(nil), "DeploymentEventsRequest")
	proto.RegisterType((*DeploymentEvent)(nil), "DeploymentEvent")
	proto.RegisterType((*DeploymentDeleteRequest)(nil), "DeploymentDeleteRequest")
	proto.RegisterType((*DeploymentDeleteResponse)(nil), "DeploymentDeleteResponse")
	proto.RegisterType((*DeploymentListRequest)(nil), "DeploymentListRequest")
	proto.RegisterType((*DeploymentListResponse)(nil), "DeploymentListResponse")
	proto.RegisterType((*Deployment)(nil), "Deployment")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Datacenter service

type DatacenterClient interface {
	// Create new deployment which will be owned by caller (metacenter)
	DeploymentCreate(ctx context.Context, in *DeploymentCreateRequest, opts ...grpc.CallOption) (*DeploymentCreateResponse, error)
	// Update deployment owned by caller (metacenter)
	DeploymentUpdate(ctx context.Context, in *DeploymentUpdateRequest, opts ...grpc.CallOption) (*DeploymentUpdateResponse, error)
	// Get status for deployment owned by caller (metacenter)
	DeploymentStatus(ctx context.Context, in *DeploymentStatusRequest, opts ...grpc.CallOption) (*DeploymentStatusResponse, error)
	// Get events for deployment owned by caller (metacenter)
	DeploymentEvents(ctx context.Context, in *DeploymentEventsRequest, opts ...grpc.CallOption) (Datacenter_DeploymentEventsClient, error)
	// Delete deployment owned by caller (metacenter)
	DeploymentDelete(ctx context.Context, in *DeploymentDeleteRequest, opts ...grpc.CallOption) (*DeploymentDeleteResponse, error)
	// List deployments owned by caller (metacenter)
	DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*DeploymentListResponse, error)
}

type datacenterClient struct {
	cc *grpc.ClientConn
}

func NewDatacenterClient(cc *grpc.ClientConn) DatacenterClient {
	return &datacenterClient{cc}
}

func (c *datacenterClient) DeploymentCreate(ctx context.Context, in *DeploymentCreateRequest, opts ...grpc.CallOption) (*DeploymentCreateResponse, error) {
	out := new(DeploymentCreateResponse)
	err := grpc.Invoke(ctx, "/Datacenter/DeploymentCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) DeploymentUpdate(ctx context.Context, in *DeploymentUpdateRequest, opts ...grpc.CallOption) (*DeploymentUpdateResponse, error) {
	out := new(DeploymentUpdateResponse)
	err := grpc.Invoke(ctx, "/Datacenter/DeploymentUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) DeploymentStatus(ctx context.Context, in *DeploymentStatusRequest, opts ...grpc.CallOption) (*DeploymentStatusResponse, error) {
	out := new(DeploymentStatusResponse)
	err := grpc.Invoke(ctx, "/Datacenter/DeploymentStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) DeploymentEvents(ctx context.Context, in *DeploymentEventsRequest, opts ...grpc.CallOption) (Datacenter_DeploymentEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Datacenter_serviceDesc.Streams[0], c.cc, "/Datacenter/DeploymentEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &datacenterDeploymentEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Datacenter_DeploymentEventsClient interface {
	Recv() (*DeploymentEvent, error)
	grpc.ClientStream
}

type datacenterDeploymentEventsClient struct {
	grpc.ClientStream
}

func (x *datacenterDeploymentEventsClient) Recv() (*DeploymentEvent, error) {
	m := new(DeploymentEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datacenterClient) DeploymentDelete(ctx context.Context, in *DeploymentDeleteRequest, opts ...grpc.CallOption) (*DeploymentDeleteResponse, error) {
	out := new(DeploymentDeleteResponse)
	err := grpc.Invoke(ctx, "/Datacenter/DeploymentDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterClient) DeploymentList(ctx context.Context, in *DeploymentListRequest, opts ...grpc.CallOption) (*DeploymentListResponse, error) {
	out := new(DeploymentListResponse)
	err := grpc.Invoke(ctx, "/Datacenter/DeploymentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Datacenter service

type DatacenterServer interface {
	// Create new deployment which will be owned by caller (metacenter)
	DeploymentCreate(context.Context, *DeploymentCreateRequest) (*DeploymentCreateResponse, error)
	// Update deployment owned by caller (metacenter)
	DeploymentUpdate(context.Context, *DeploymentUpdateRequest) (*DeploymentUpdateResponse, error)
	// Get status for deployment owned by caller (metacenter)
	DeploymentStatus(context.Context, *DeploymentStatusRequest) (*DeploymentStatusResponse, error)
	// Get events for deployment owned by caller (metacenter)
	DeploymentEvents(*DeploymentEventsRequest, Datacenter_DeploymentEventsServer) error
	// Delete deployment owned by caller (metacenter)
	DeploymentDelete(context.Context, *DeploymentDeleteRequest) (*DeploymentDeleteResponse, error)
	// List deployments owned by caller (metacenter)
	DeploymentList(context.Context, *DeploymentListRequest) (*DeploymentListResponse, error)
}

func RegisterDatacenterServer(s *grpc.Server, srv DatacenterServer) {
	s.RegisterService(&_Datacenter_serviceDesc, srv)
}

func _Datacenter_DeploymentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).DeploymentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datacenter/DeploymentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).DeploymentCreate(ctx, req.(*DeploymentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_DeploymentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).DeploymentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datacenter/DeploymentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).DeploymentUpdate(ctx, req.(*DeploymentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_DeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).DeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datacenter/DeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).DeploymentStatus(ctx, req.(*DeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_DeploymentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatacenterServer).DeploymentEvents(m, &datacenterDeploymentEventsServer{stream})
}

type Datacenter_DeploymentEventsServer interface {
	Send(*DeploymentEvent) error
	grpc.ServerStream
}

type datacenterDeploymentEventsServer struct {
	grpc.ServerStream
}

func (x *datacenterDeploymentEventsServer) Send(m *DeploymentEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Datacenter_DeploymentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).DeploymentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datacenter/DeploymentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).DeploymentDelete(ctx, req.(*DeploymentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datacenter_DeploymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServer).DeploymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Datacenter/DeploymentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServer).DeploymentList(ctx, req.(*DeploymentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Datacenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Datacenter",
	HandlerType: (*DatacenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeploymentCreate",
			Handler:    _Datacenter_DeploymentCreate_Handler,
		},
		{
			MethodName: "DeploymentUpdate",
			Handler:    _Datacenter_DeploymentUpdate_Handler,
		},
		{
			MethodName: "DeploymentStatus",
			Handler:    _Datacenter_DeploymentStatus_Handler,
		},
		{
			MethodName: "DeploymentDelete",
			Handler:    _Datacenter_DeploymentDelete_Handler,
		},
		{
			MethodName: "DeploymentList",
			Handler:    _Datacenter_DeploymentList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeploymentEvents",
			Handler:       _Datacenter_DeploymentEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/datacenter/datacenter.proto",
}

func init() { proto.RegisterFile("api/datacenter/datacenter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x43, 0x9b, 0x9a, 0x38, 0x4d, 0x6a, 0x43, 0xb4, 0x50, 0x2e, 0xb6, 0x9c, 0xaa, 0x87,
	0xd5, 0xe0, 0xd1, 0x8b, 0x46, 0x8c, 0x17, 0x4f, 0x18, 0x1f, 0x60, 0x95, 0x39, 0x6c, 0xd2, 0xc2,
	0xca, 0x4e, 0x4d, 0x7c, 0x30, 0xdf, 0xcf, 0xa4, 0x2b, 0xc2, 0x6c, 0x8b, 0xe1, 0x06, 0x3b, 0x7f,
	0x3e, 0x86, 0xfc, 0xdf, 0xc2, 0xb9, 0xd4, 0xea, 0x2a, 0x97, 0x24, 0xdf, 0xb1, 0x20, 0xac, 0x5a,
	0x8f, 0x42, 0x57, 0x25, 0x95, 0xf1, 0x1c, 0x82, 0x14, 0xf5, 0xba, 0xfc, 0xda, 0x60, 0x41, 0x0f,
	0x15, 0x4a, 0xc2, 0x0c, 0x3f, 0xb6, 0x68, 0x28, 0xbe, 0x84, 0x70, 0x7f, 0x64, 0x74, 0x59, 0x18,
	0xf4, 0x27, 0x30, 0x50, 0x79, 0xe8, 0x2d, 0xbc, 0xd5, 0x71, 0x36, 0x50, 0x79, 0x7c, 0xd1, 0xc6,
	0xbc, 0xea, 0xbc, 0xc1, 0xec, 0x45, 0x19, 0xb6, 0x8e, 0xf6, 0xc1, 0xbe, 0x90, 0xa4, 0xad, 0xe9,
	0x85, 0xad, 0xa3, 0x7d, 0xb0, 0x8f, 0x9f, 0x58, 0x50, 0x27, 0x76, 0x09, 0x27, 0x4e, 0xf4, 0x7f,
	0x5a, 0x8a, 0x6b, 0xec, 0xf9, 0xef, 0x75, 0xb4, 0x63, 0xc9, 0x00, 0xce, 0x9a, 0xec, 0xb3, 0x32,
	0x54, 0xf7, 0x72, 0x0b, 0x33, 0x77, 0xf0, 0x8b, 0x58, 0xc2, 0x48, 0x11, 0x6e, 0x4c, 0xe8, 0x2d,
	0x86, 0xab, 0x71, 0x32, 0x16, 0x4d, 0x2e, 0xb3, 0x93, 0x38, 0x01, 0x68, 0x0e, 0xdd, 0x6f, 0xfa,
	0xa7, 0x30, 0x32, 0x24, 0x09, 0xc3, 0xc1, 0xee, 0xc8, 0xbe, 0x24, 0xdf, 0x43, 0x80, 0xf4, 0x4f,
	0x1c, 0xff, 0x09, 0xa6, 0xae, 0x17, 0x7e, 0x28, 0x3a, 0x2c, 0x8a, 0xe6, 0xa2, 0x53, 0x22, 0x06,
	0xb2, 0x26, 0x30, 0x10, 0xf3, 0x88, 0x81, 0x1c, 0x6d, 0x18, 0xc8, 0x76, 0xcf, 0x40, 0xcc, 0x1c,
	0x06, 0x72, 0x44, 0xb9, 0x6b, 0x83, 0xac, 0x18, 0x0c, 0xc4, 0x5c, 0x89, 0xa6, 0xee, 0xe4, 0xda,
	0xe3, 0xab, 0xd8, 0x86, 0x19, 0x81, 0xf9, 0xc1, 0x56, 0x71, 0x74, 0xb8, 0x87, 0x09, 0x6f, 0xd9,
	0x9f, 0x89, 0x83, 0x3e, 0x44, 0x81, 0x38, 0xac, 0xc3, 0xdb, 0xd1, 0xee, 0x8a, 0xdf, 0xfc, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x46, 0x48, 0xf6, 0x05, 0x04, 0x00, 0x00,
}
