// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/metacenter/metacenter.proto

/*
Package metacenter is a generated protocol buffer package.

It is generated from these files:
	api/metacenter/metacenter.proto

It has these top-level messages:
	UpdateRequest
	UpdateResponse
	StatusRequest
	StatusResponse
	EventsRequest
	Event
	RegisterServiceRequest
	RegisterServiceResponse
*/
package metacenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateRequest struct {
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatusResponse struct {
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EventsRequest struct {
}

func (m *EventsRequest) Reset()                    { *m = EventsRequest{} }
func (m *EventsRequest) String() string            { return proto.CompactTextString(m) }
func (*EventsRequest) ProtoMessage()               {}
func (*EventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Event struct {
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RegisterServiceRequest struct {
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
}

func (m *RegisterServiceRequest) Reset()                    { *m = RegisterServiceRequest{} }
func (m *RegisterServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterServiceRequest) ProtoMessage()               {}
func (*RegisterServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RegisterServiceRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type RegisterServiceResponse struct {
	Cert     string `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	CaBundle string `protobuf:"bytes,2,opt,name=ca_bundle,json=caBundle" json:"ca_bundle,omitempty"`
}

func (m *RegisterServiceResponse) Reset()                    { *m = RegisterServiceResponse{} }
func (m *RegisterServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterServiceResponse) ProtoMessage()               {}
func (*RegisterServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegisterServiceResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *RegisterServiceResponse) GetCaBundle() string {
	if m != nil {
		return m.CaBundle
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*StatusRequest)(nil), "StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "StatusResponse")
	proto.RegisterType((*EventsRequest)(nil), "EventsRequest")
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*RegisterServiceRequest)(nil), "RegisterServiceRequest")
	proto.RegisterType((*RegisterServiceResponse)(nil), "RegisterServiceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metacenter service

type MetacenterClient interface {
	// Update deployment.  Restricted to Metacenter owner (user).
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Get deployment status.  Restricted to Metacenter owner (user).
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Stream deployment events.  Restricted to Metacenter owner (user).
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Metacenter_EventsClient, error)
	// Register an exposed service hosted on the calling datacenter.
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
}

type metacenterClient struct {
	cc *grpc.ClientConn
}

func NewMetacenterClient(cc *grpc.ClientConn) MetacenterClient {
	return &metacenterClient{cc}
}

func (c *metacenterClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/Metacenter/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metacenterClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/Metacenter/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metacenterClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Metacenter_EventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Metacenter_serviceDesc.Streams[0], c.cc, "/Metacenter/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &metacenterEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metacenter_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type metacenterEventsClient struct {
	grpc.ClientStream
}

func (x *metacenterEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metacenterClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	out := new(RegisterServiceResponse)
	err := grpc.Invoke(ctx, "/Metacenter/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metacenter service

type MetacenterServer interface {
	// Update deployment.  Restricted to Metacenter owner (user).
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Get deployment status.  Restricted to Metacenter owner (user).
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Stream deployment events.  Restricted to Metacenter owner (user).
	Events(*EventsRequest, Metacenter_EventsServer) error
	// Register an exposed service hosted on the calling datacenter.
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
}

func RegisterMetacenterServer(s *grpc.Server, srv MetacenterServer) {
	s.RegisterService(&_Metacenter_serviceDesc, srv)
}

func _Metacenter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetacenterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Metacenter/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetacenterServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metacenter_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetacenterServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Metacenter/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetacenterServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metacenter_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetacenterServer).Events(m, &metacenterEventsServer{stream})
}

type Metacenter_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type metacenterEventsServer struct {
	grpc.ServerStream
}

func (x *metacenterEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Metacenter_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetacenterServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Metacenter/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetacenterServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metacenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Metacenter",
	HandlerType: (*MetacenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Metacenter_Update_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Metacenter_Status_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _Metacenter_RegisterService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Metacenter_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/metacenter/metacenter.proto",
}

func init() { proto.RegisterFile("api/metacenter/metacenter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0xf4, 0x30,
	0x10, 0x87, 0xe9, 0xcb, 0x6b, 0x74, 0x07, 0x6c, 0x65, 0x0e, 0xbb, 0xa5, 0x1e, 0x94, 0x9c, 0xf4,
	0x12, 0x17, 0xfd, 0x06, 0xa2, 0x17, 0xc1, 0x4b, 0x17, 0xcf, 0x92, 0x66, 0x07, 0x29, 0x6a, 0x1b,
	0x93, 0xe9, 0x82, 0xdf, 0xd1, 0x0f, 0x25, 0x9b, 0x6c, 0xd7, 0x8d, 0x7f, 0x6e, 0x33, 0xbf, 0x3c,
	0xc3, 0xf0, 0x4c, 0xe0, 0x44, 0xdb, 0xf6, 0xe2, 0x95, 0x58, 0x1b, 0xea, 0x98, 0xdc, 0x4e, 0xa9,
	0xac, 0xeb, 0xb9, 0x97, 0x05, 0x1c, 0x3e, 0xd8, 0xa5, 0x66, 0xaa, 0xe9, 0x6d, 0x20, 0xcf, 0xf2,
	0x08, 0xf2, 0x31, 0xf0, 0xb6, 0xef, 0x3c, 0xad, 0x91, 0x05, 0x6b, 0x1e, 0xfc, 0x0e, 0x32, 0x06,
	0x5f, 0xc8, 0xed, 0x8a, 0x3a, 0xde, 0x22, 0xfb, 0xb0, 0x17, 0x02, 0x39, 0x87, 0x69, 0x4d, 0x4f,
	0xad, 0x67, 0x72, 0x0b, 0x72, 0xab, 0xd6, 0x8c, 0x8b, 0x70, 0x0a, 0xc2, 0x0e, 0xcd, 0x33, 0xbd,
	0x97, 0xd9, 0x69, 0x76, 0x36, 0xa9, 0x37, 0x9d, 0xbc, 0x83, 0xd9, 0x8f, 0x89, 0xb8, 0x06, 0x11,
	0xfe, 0x1b, 0x72, 0xbc, 0x19, 0x08, 0x35, 0x1e, 0xc3, 0xc4, 0xe8, 0xc7, 0x66, 0xe8, 0x96, 0x2f,
	0x54, 0xfe, 0x0b, 0x0f, 0x07, 0x46, 0x5f, 0x87, 0xfe, 0xf2, 0x23, 0x03, 0xb8, 0xdf, 0x2a, 0xe3,
	0x39, 0x88, 0xe8, 0x86, 0xb9, 0x4a, 0xac, 0xab, 0x42, 0xa5, 0xd2, 0x6b, 0x34, 0x3a, 0x62, 0xae,
	0x12, 0xfb, 0xaa, 0x50, 0xa9, 0x3c, 0x4a, 0x10, 0x51, 0x1e, 0x73, 0x95, 0x5c, 0xa1, 0x12, 0xb1,
	0x9f, 0x67, 0x78, 0x03, 0xc5, 0x37, 0x29, 0x9c, 0xa9, 0xdf, 0x0f, 0x53, 0x95, 0xea, 0x0f, 0xff,
	0x46, 0x84, 0x3f, 0xbb, 0xfa, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x95, 0xfc, 0xeb, 0x2e, 0xd6, 0x01,
	0x00, 0x00,
}
