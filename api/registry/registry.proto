syntax = "proto3";

service Registry {

  // Create new Account and return identity bundle.
  rpc AccountCreate(AccountCreateRequest)               returns (AccountCreateResponse);

  // List all Metacenters owned by caller (user).
  rpc AccountMetacenters(AccountMetacentersRequest)     returns (AccountMetacentersResponse);

  // List all Datacenters owned by caller (provider)
  rpc AccountDatacenters(AccountDatacentersRequest) returns (AccountDatacentersResponse);

  // Create Metacenter which will be owned by caller (user).
  rpc MetacenterCreate (MetacenterCreateRequest) returns (MetacenterCreateResponse);

  // Delete Metacenter owned by caller (user).
  rpc MetacenterDelete (MetacenterDeleteRequest) returns (MetacenterDeleteResponse);

  // Create Datacenter owned by caller (provider).
  rpc DatacenterCreate (DatacenterCreateRequest) returns (DatacenterCreateResponse);

  // Update Datacenter owned by caller (provider).
  rpc DatacenterUpdate (DatacenterUpdateRequest) returns (DatacenterUpdateResponse);

  // Delete Datacenter owned by caller (provider).
  rpc DatacenterDelete (DatacenterDeleteRequest) returns (DatacenterDeleteResponse);

  // Match Datacenters for given request.
  rpc DatacenterMatch  (DatacenterMatchRequest)  returns (DatacenterMatchResponse);

}

message AccountCreateRequest {
  string email = 1;
}

message AccountCreateResponse {
  string id   = 1;
  string cert = 2;
  string key  = 3;
}

message AccountMetacentersRequest {
}

message AccountMetacentersResponse {
  repeated Metacenter items = 1;
}

message AccountDatacentersRequest {
}

message AccountDatacentersResponse {
  repeated Datacenter items = 1;
}

message MetacenterCreateRequest {
}

message MetacenterCreateResponse {
  string id = 1;
}

message MetacenterDeleteRequest {
  string id = 1;
}

message MetacenterDeleteResponse {
}

message DatacenterCreateRequest {
}

message DatacenterCreateResponse {
  string id = 1;
}

message DatacenterUpdateRequest {
  string id = 1;
}

message DatacenterUpdateResponse {
  string id = 1;
}

message DatacenterDeleteRequest {
  string id = 1;
}

message DatacenterDeleteResponse {
}

message DatacenterMatchRequest {
}

message DatacenterMatchResponse {
  repeated Datacenter items = 1;
}

message Datacenter {
  string id       = 1;
  string endpoint = 2;
  string state    = 3;
}

message Metacenter {
  string id       = 1;
  string endpoint = 2;
  string state    = 3;
}
