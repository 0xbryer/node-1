// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/registry/registry.proto

/*
Package registry is a generated protocol buffer package.

It is generated from these files:
	api/registry/registry.proto

It has these top-level messages:
	AccountCreateRequest
	AccountCreateResponse
	AccountMetacentersRequest
	AccountMetacentersResponse
	AccountControlAgentsRequest
	AccountControlAgentsResponse
	MetacenterCreateRequest
	MetacenterCreateResponse
	MetacenterDeleteRequest
	MetacenterDeleteResponse
	ControlAgentCreateRequest
	ControlAgentCreateResponse
	ControlAgentUpdateRequest
	ControlAgentUpdateResponse
	ControlAgentDeleteRequest
	ControlAgentDeleteResponse
	ControlAgentMatchRequest
	ControlAgentMatchResponse
	ControlAgent
	Metacenter
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountCreateRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *AccountCreateRequest) Reset()                    { *m = AccountCreateRequest{} }
func (m *AccountCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountCreateRequest) ProtoMessage()               {}
func (*AccountCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountCreateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AccountCreateResponse struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cert string `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *AccountCreateResponse) Reset()                    { *m = AccountCreateResponse{} }
func (m *AccountCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountCreateResponse) ProtoMessage()               {}
func (*AccountCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountCreateResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *AccountCreateResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type AccountMetacentersRequest struct {
}

func (m *AccountMetacentersRequest) Reset()                    { *m = AccountMetacentersRequest{} }
func (m *AccountMetacentersRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountMetacentersRequest) ProtoMessage()               {}
func (*AccountMetacentersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AccountMetacentersResponse struct {
	Items []*Metacenter `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *AccountMetacentersResponse) Reset()                    { *m = AccountMetacentersResponse{} }
func (m *AccountMetacentersResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountMetacentersResponse) ProtoMessage()               {}
func (*AccountMetacentersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountMetacentersResponse) GetItems() []*Metacenter {
	if m != nil {
		return m.Items
	}
	return nil
}

type AccountControlAgentsRequest struct {
}

func (m *AccountControlAgentsRequest) Reset()                    { *m = AccountControlAgentsRequest{} }
func (m *AccountControlAgentsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountControlAgentsRequest) ProtoMessage()               {}
func (*AccountControlAgentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AccountControlAgentsResponse struct {
	Items []*ControlAgent `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *AccountControlAgentsResponse) Reset()                    { *m = AccountControlAgentsResponse{} }
func (m *AccountControlAgentsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountControlAgentsResponse) ProtoMessage()               {}
func (*AccountControlAgentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AccountControlAgentsResponse) GetItems() []*ControlAgent {
	if m != nil {
		return m.Items
	}
	return nil
}

type MetacenterCreateRequest struct {
}

func (m *MetacenterCreateRequest) Reset()                    { *m = MetacenterCreateRequest{} }
func (m *MetacenterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*MetacenterCreateRequest) ProtoMessage()               {}
func (*MetacenterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type MetacenterCreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MetacenterCreateResponse) Reset()                    { *m = MetacenterCreateResponse{} }
func (m *MetacenterCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*MetacenterCreateResponse) ProtoMessage()               {}
func (*MetacenterCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MetacenterCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MetacenterDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MetacenterDeleteRequest) Reset()                    { *m = MetacenterDeleteRequest{} }
func (m *MetacenterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*MetacenterDeleteRequest) ProtoMessage()               {}
func (*MetacenterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MetacenterDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MetacenterDeleteResponse struct {
}

func (m *MetacenterDeleteResponse) Reset()                    { *m = MetacenterDeleteResponse{} }
func (m *MetacenterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*MetacenterDeleteResponse) ProtoMessage()               {}
func (*MetacenterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ControlAgentCreateRequest struct {
}

func (m *ControlAgentCreateRequest) Reset()                    { *m = ControlAgentCreateRequest{} }
func (m *ControlAgentCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentCreateRequest) ProtoMessage()               {}
func (*ControlAgentCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ControlAgentCreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ControlAgentCreateResponse) Reset()                    { *m = ControlAgentCreateResponse{} }
func (m *ControlAgentCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentCreateResponse) ProtoMessage()               {}
func (*ControlAgentCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ControlAgentCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ControlAgentUpdateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ControlAgentUpdateRequest) Reset()                    { *m = ControlAgentUpdateRequest{} }
func (m *ControlAgentUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentUpdateRequest) ProtoMessage()               {}
func (*ControlAgentUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ControlAgentUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ControlAgentUpdateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ControlAgentUpdateResponse) Reset()                    { *m = ControlAgentUpdateResponse{} }
func (m *ControlAgentUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentUpdateResponse) ProtoMessage()               {}
func (*ControlAgentUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ControlAgentUpdateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ControlAgentDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ControlAgentDeleteRequest) Reset()                    { *m = ControlAgentDeleteRequest{} }
func (m *ControlAgentDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentDeleteRequest) ProtoMessage()               {}
func (*ControlAgentDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ControlAgentDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ControlAgentDeleteResponse struct {
}

func (m *ControlAgentDeleteResponse) Reset()                    { *m = ControlAgentDeleteResponse{} }
func (m *ControlAgentDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentDeleteResponse) ProtoMessage()               {}
func (*ControlAgentDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type ControlAgentMatchRequest struct {
}

func (m *ControlAgentMatchRequest) Reset()                    { *m = ControlAgentMatchRequest{} }
func (m *ControlAgentMatchRequest) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentMatchRequest) ProtoMessage()               {}
func (*ControlAgentMatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type ControlAgentMatchResponse struct {
	Items []*ControlAgent `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ControlAgentMatchResponse) Reset()                    { *m = ControlAgentMatchResponse{} }
func (m *ControlAgentMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*ControlAgentMatchResponse) ProtoMessage()               {}
func (*ControlAgentMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ControlAgentMatchResponse) GetItems() []*ControlAgent {
	if m != nil {
		return m.Items
	}
	return nil
}

type ControlAgent struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *ControlAgent) Reset()                    { *m = ControlAgent{} }
func (m *ControlAgent) String() string            { return proto.CompactTextString(m) }
func (*ControlAgent) ProtoMessage()               {}
func (*ControlAgent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ControlAgent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ControlAgent) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ControlAgent) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Metacenter struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *Metacenter) Reset()                    { *m = Metacenter{} }
func (m *Metacenter) String() string            { return proto.CompactTextString(m) }
func (*Metacenter) ProtoMessage()               {}
func (*Metacenter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Metacenter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Metacenter) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Metacenter) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountCreateRequest)(nil), "registry.AccountCreateRequest")
	proto.RegisterType((*AccountCreateResponse)(nil), "registry.AccountCreateResponse")
	proto.RegisterType((*AccountMetacentersRequest)(nil), "registry.AccountMetacentersRequest")
	proto.RegisterType((*AccountMetacentersResponse)(nil), "registry.AccountMetacentersResponse")
	proto.RegisterType((*AccountControlAgentsRequest)(nil), "registry.AccountControlAgentsRequest")
	proto.RegisterType((*AccountControlAgentsResponse)(nil), "registry.AccountControlAgentsResponse")
	proto.RegisterType((*MetacenterCreateRequest)(nil), "registry.MetacenterCreateRequest")
	proto.RegisterType((*MetacenterCreateResponse)(nil), "registry.MetacenterCreateResponse")
	proto.RegisterType((*MetacenterDeleteRequest)(nil), "registry.MetacenterDeleteRequest")
	proto.RegisterType((*MetacenterDeleteResponse)(nil), "registry.MetacenterDeleteResponse")
	proto.RegisterType((*ControlAgentCreateRequest)(nil), "registry.ControlAgentCreateRequest")
	proto.RegisterType((*ControlAgentCreateResponse)(nil), "registry.ControlAgentCreateResponse")
	proto.RegisterType((*ControlAgentUpdateRequest)(nil), "registry.ControlAgentUpdateRequest")
	proto.RegisterType((*ControlAgentUpdateResponse)(nil), "registry.ControlAgentUpdateResponse")
	proto.RegisterType((*ControlAgentDeleteRequest)(nil), "registry.ControlAgentDeleteRequest")
	proto.RegisterType((*ControlAgentDeleteResponse)(nil), "registry.ControlAgentDeleteResponse")
	proto.RegisterType((*ControlAgentMatchRequest)(nil), "registry.ControlAgentMatchRequest")
	proto.RegisterType((*ControlAgentMatchResponse)(nil), "registry.ControlAgentMatchResponse")
	proto.RegisterType((*ControlAgent)(nil), "registry.ControlAgent")
	proto.RegisterType((*Metacenter)(nil), "registry.Metacenter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	AccountCreate(ctx context.Context, in *AccountCreateRequest, opts ...grpc.CallOption) (*AccountCreateResponse, error)
	AccountMetacenters(ctx context.Context, in *AccountMetacentersRequest, opts ...grpc.CallOption) (*AccountMetacentersResponse, error)
	AccountControlAgents(ctx context.Context, in *AccountControlAgentsRequest, opts ...grpc.CallOption) (*AccountControlAgentsResponse, error)
	MetacenterCreate(ctx context.Context, in *MetacenterCreateRequest, opts ...grpc.CallOption) (*MetacenterCreateResponse, error)
	MetacenterDelete(ctx context.Context, in *MetacenterDeleteRequest, opts ...grpc.CallOption) (*MetacenterDeleteResponse, error)
	ControlAgentCreate(ctx context.Context, in *ControlAgentCreateRequest, opts ...grpc.CallOption) (*ControlAgentCreateResponse, error)
	ControlAgentUpdate(ctx context.Context, in *ControlAgentUpdateRequest, opts ...grpc.CallOption) (*ControlAgentUpdateResponse, error)
	ControlAgentDelete(ctx context.Context, in *ControlAgentDeleteRequest, opts ...grpc.CallOption) (*ControlAgentDeleteResponse, error)
	ControlAgentMatch(ctx context.Context, in *ControlAgentMatchRequest, opts ...grpc.CallOption) (*ControlAgentMatchResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) AccountCreate(ctx context.Context, in *AccountCreateRequest, opts ...grpc.CallOption) (*AccountCreateResponse, error) {
	out := new(AccountCreateResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/AccountCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AccountMetacenters(ctx context.Context, in *AccountMetacentersRequest, opts ...grpc.CallOption) (*AccountMetacentersResponse, error) {
	out := new(AccountMetacentersResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/AccountMetacenters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AccountControlAgents(ctx context.Context, in *AccountControlAgentsRequest, opts ...grpc.CallOption) (*AccountControlAgentsResponse, error) {
	out := new(AccountControlAgentsResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/AccountControlAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MetacenterCreate(ctx context.Context, in *MetacenterCreateRequest, opts ...grpc.CallOption) (*MetacenterCreateResponse, error) {
	out := new(MetacenterCreateResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MetacenterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MetacenterDelete(ctx context.Context, in *MetacenterDeleteRequest, opts ...grpc.CallOption) (*MetacenterDeleteResponse, error) {
	out := new(MetacenterDeleteResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/MetacenterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ControlAgentCreate(ctx context.Context, in *ControlAgentCreateRequest, opts ...grpc.CallOption) (*ControlAgentCreateResponse, error) {
	out := new(ControlAgentCreateResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/ControlAgentCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ControlAgentUpdate(ctx context.Context, in *ControlAgentUpdateRequest, opts ...grpc.CallOption) (*ControlAgentUpdateResponse, error) {
	out := new(ControlAgentUpdateResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/ControlAgentUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ControlAgentDelete(ctx context.Context, in *ControlAgentDeleteRequest, opts ...grpc.CallOption) (*ControlAgentDeleteResponse, error) {
	out := new(ControlAgentDeleteResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/ControlAgentDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ControlAgentMatch(ctx context.Context, in *ControlAgentMatchRequest, opts ...grpc.CallOption) (*ControlAgentMatchResponse, error) {
	out := new(ControlAgentMatchResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/ControlAgentMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	AccountCreate(context.Context, *AccountCreateRequest) (*AccountCreateResponse, error)
	AccountMetacenters(context.Context, *AccountMetacentersRequest) (*AccountMetacentersResponse, error)
	AccountControlAgents(context.Context, *AccountControlAgentsRequest) (*AccountControlAgentsResponse, error)
	MetacenterCreate(context.Context, *MetacenterCreateRequest) (*MetacenterCreateResponse, error)
	MetacenterDelete(context.Context, *MetacenterDeleteRequest) (*MetacenterDeleteResponse, error)
	ControlAgentCreate(context.Context, *ControlAgentCreateRequest) (*ControlAgentCreateResponse, error)
	ControlAgentUpdate(context.Context, *ControlAgentUpdateRequest) (*ControlAgentUpdateResponse, error)
	ControlAgentDelete(context.Context, *ControlAgentDeleteRequest) (*ControlAgentDeleteResponse, error)
	ControlAgentMatch(context.Context, *ControlAgentMatchRequest) (*ControlAgentMatchResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccountCreate(ctx, req.(*AccountCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AccountMetacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMetacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccountMetacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/AccountMetacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccountMetacenters(ctx, req.(*AccountMetacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AccountControlAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountControlAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccountControlAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/AccountControlAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccountControlAgents(ctx, req.(*AccountControlAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MetacenterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetacenterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MetacenterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MetacenterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MetacenterCreate(ctx, req.(*MetacenterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MetacenterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetacenterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MetacenterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/MetacenterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MetacenterDelete(ctx, req.(*MetacenterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ControlAgentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlAgentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ControlAgentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ControlAgentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ControlAgentCreate(ctx, req.(*ControlAgentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ControlAgentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlAgentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ControlAgentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ControlAgentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ControlAgentUpdate(ctx, req.(*ControlAgentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ControlAgentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlAgentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ControlAgentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ControlAgentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ControlAgentDelete(ctx, req.(*ControlAgentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ControlAgentMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlAgentMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ControlAgentMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ControlAgentMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ControlAgentMatch(ctx, req.(*ControlAgentMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountCreate",
			Handler:    _Registry_AccountCreate_Handler,
		},
		{
			MethodName: "AccountMetacenters",
			Handler:    _Registry_AccountMetacenters_Handler,
		},
		{
			MethodName: "AccountControlAgents",
			Handler:    _Registry_AccountControlAgents_Handler,
		},
		{
			MethodName: "MetacenterCreate",
			Handler:    _Registry_MetacenterCreate_Handler,
		},
		{
			MethodName: "MetacenterDelete",
			Handler:    _Registry_MetacenterDelete_Handler,
		},
		{
			MethodName: "ControlAgentCreate",
			Handler:    _Registry_ControlAgentCreate_Handler,
		},
		{
			MethodName: "ControlAgentUpdate",
			Handler:    _Registry_ControlAgentUpdate_Handler,
		},
		{
			MethodName: "ControlAgentDelete",
			Handler:    _Registry_ControlAgentDelete_Handler,
		},
		{
			MethodName: "ControlAgentMatch",
			Handler:    _Registry_ControlAgentMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/registry/registry.proto",
}

func init() { proto.RegisterFile("api/registry/registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0xab, 0xd3, 0x40,
	0x10, 0xa5, 0xad, 0xf7, 0x52, 0xc7, 0x0f, 0xae, 0x4b, 0xd5, 0xdc, 0xed, 0x55, 0xaf, 0xdb, 0x2a,
	0xb5, 0x96, 0x0a, 0xf5, 0x17, 0x14, 0x7d, 0x50, 0xb0, 0x52, 0x02, 0x3e, 0x08, 0x82, 0xc4, 0x64,
	0xa8, 0xc1, 0x36, 0x89, 0xc9, 0xf6, 0xa1, 0xbf, 0xd5, 0x3f, 0x23, 0x49, 0x36, 0xc9, 0x7e, 0x25,
	0x8a, 0xbe, 0xed, 0xee, 0x9c, 0x9c, 0x33, 0x33, 0xbb, 0x67, 0x02, 0x63, 0x2f, 0x09, 0x5f, 0xa5,
	0xb8, 0x0b, 0x33, 0x9e, 0x9e, 0xea, 0xc5, 0x32, 0x49, 0x63, 0x1e, 0x93, 0x61, 0xb5, 0x67, 0x0b,
	0x18, 0xad, 0x7d, 0x3f, 0x3e, 0x46, 0xfc, 0x4d, 0x8a, 0x1e, 0x47, 0x17, 0x7f, 0x1e, 0x31, 0xe3,
	0x64, 0x04, 0x67, 0x78, 0xf0, 0xc2, 0xbd, 0xd3, 0xbb, 0xee, 0xcd, 0x6e, 0xba, 0xe5, 0x86, 0x6d,
	0xe0, 0xbe, 0x86, 0xce, 0x92, 0x38, 0xca, 0x90, 0xdc, 0x85, 0x7e, 0x18, 0x08, 0x6c, 0x3f, 0x0c,
	0x08, 0x81, 0x1b, 0x3e, 0xa6, 0xdc, 0xe9, 0x17, 0x27, 0xc5, 0x9a, 0x5c, 0xc0, 0xe0, 0x07, 0x9e,
	0x9c, 0x41, 0x71, 0x94, 0x2f, 0xd9, 0x18, 0x2e, 0x05, 0xdd, 0x06, 0xb9, 0xe7, 0x63, 0xc4, 0x31,
	0xcd, 0x44, 0x06, 0xec, 0x1d, 0x50, 0x5b, 0x50, 0x08, 0xce, 0xe1, 0x2c, 0xe4, 0x78, 0xc8, 0x9c,
	0xde, 0xf5, 0x60, 0x76, 0x6b, 0x35, 0x5a, 0xd6, 0x15, 0x36, 0x68, 0xb7, 0x84, 0xb0, 0x47, 0x30,
	0xae, 0xb2, 0x8e, 0x23, 0x9e, 0xc6, 0xfb, 0xf5, 0x0e, 0x23, 0x5e, 0x0b, 0x7d, 0x80, 0x2b, 0x7b,
	0x58, 0x48, 0x2d, 0x54, 0xa9, 0x07, 0x8d, 0x94, 0x8c, 0xaf, 0xc4, 0x2e, 0xe1, 0x61, 0x93, 0x81,
	0xd2, 0x53, 0x36, 0x07, 0xc7, 0x0c, 0xd9, 0x1b, 0xc8, 0x5e, 0xc8, 0x34, 0x6f, 0x71, 0x8f, 0xcd,
	0xd5, 0xe8, 0x50, 0x2a, 0xd3, 0x56, 0xd0, 0x92, 0x36, 0xef, 0xb0, 0x9c, 0xa4, 0x9a, 0xcf, 0x02,
	0xa8, 0x2d, 0xd8, 0x92, 0xd1, 0x4b, 0x95, 0xea, 0x53, 0x12, 0x78, 0xed, 0x39, 0x69, 0xd4, 0x15,
	0xf8, 0xef, 0xa8, 0xbb, 0xcb, 0xbd, 0x52, 0xa9, 0xb5, 0x82, 0x29, 0x38, 0x72, 0x74, 0xe3, 0x71,
	0xff, 0x7b, 0x55, 0xef, 0x7b, 0x55, 0x46, 0xc4, 0xfe, 0xe9, 0x96, 0xb7, 0x70, 0x5b, 0x3e, 0x36,
	0xde, 0x3f, 0x85, 0x21, 0x46, 0x41, 0x12, 0x87, 0x51, 0xe5, 0x81, 0x7a, 0x9f, 0x5b, 0x2b, 0xe3,
	0x1e, 0x47, 0xe1, 0x84, 0x72, 0xc3, 0x3e, 0x02, 0x34, 0xb7, 0xf8, 0xff, 0x7c, 0xab, 0x5f, 0xe7,
	0x30, 0x74, 0x45, 0x09, 0x64, 0x0b, 0x77, 0x14, 0xdf, 0x92, 0xc7, 0x4d, 0x79, 0x36, 0xfb, 0xd3,
	0x27, 0xad, 0x71, 0xd1, 0xae, 0xaf, 0x40, 0x4c, 0x77, 0x92, 0x89, 0xf1, 0x99, 0x69, 0x6c, 0x3a,
	0xed, 0x06, 0x09, 0x01, 0x6c, 0x06, 0x93, 0xec, 0x4a, 0xf2, 0xcc, 0xcc, 0xcc, 0x62, 0x6a, 0xfa,
	0xfc, 0x4f, 0x30, 0x21, 0xf3, 0x19, 0x2e, 0x74, 0x4f, 0x92, 0xa7, 0xb6, 0x61, 0xa2, 0xf6, 0x87,
	0x75, 0x41, 0x6c, 0xd4, 0xe5, 0x33, 0xb5, 0x53, 0x2b, 0xef, 0xdd, 0x4e, 0xad, 0xbe, 0xf2, 0xbc,
	0xfb, 0xa6, 0x73, 0xe5, 0xee, 0xb7, 0x9a, 0x5e, 0xee, 0x7e, 0x87, 0xf9, 0x35, 0x81, 0xd2, 0xbf,
	0x6d, 0x02, 0xca, 0x28, 0x68, 0x13, 0xd0, 0x46, 0x80, 0x26, 0x20, 0xda, 0xd3, 0x22, 0xa0, 0x36,
	0x68, 0xda, 0x0d, 0x12, 0x02, 0x5f, 0xe0, 0x9e, 0x61, 0x76, 0xc2, 0xec, 0x9f, 0xca, 0x53, 0x82,
	0x4e, 0x3a, 0x31, 0x25, 0xfb, 0xb7, 0xf3, 0xe2, 0x3f, 0xfa, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x74, 0xae, 0xe1, 0x66, 0x66, 0x07, 0x00, 0x00,
}
