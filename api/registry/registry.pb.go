// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/registry/registry.proto

/*
Package registry is a generated protocol buffer package.

It is generated from these files:
	api/registry/registry.proto

It has these top-level messages:
	AccountCreateRequest
	AccountCreateResponse
	AccountMetacentersRequest
	AccountMetacentersResponse
	AccountDatacentersRequest
	AccountDatacentersResponse
	MetacenterCreateRequest
	MetacenterCreateResponse
	MetacenterDeleteRequest
	MetacenterDeleteResponse
	DatacenterCreateRequest
	DatacenterCreateResponse
	DatacenterUpdateRequest
	DatacenterUpdateResponse
	DatacenterDeleteRequest
	DatacenterDeleteResponse
	DatacenterMatchRequest
	DatacenterMatchResponse
	Datacenter
	Metacenter
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountCreateRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *AccountCreateRequest) Reset()                    { *m = AccountCreateRequest{} }
func (m *AccountCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountCreateRequest) ProtoMessage()               {}
func (*AccountCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountCreateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AccountCreateResponse struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cert string `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *AccountCreateResponse) Reset()                    { *m = AccountCreateResponse{} }
func (m *AccountCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountCreateResponse) ProtoMessage()               {}
func (*AccountCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountCreateResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *AccountCreateResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type AccountMetacentersRequest struct {
}

func (m *AccountMetacentersRequest) Reset()                    { *m = AccountMetacentersRequest{} }
func (m *AccountMetacentersRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountMetacentersRequest) ProtoMessage()               {}
func (*AccountMetacentersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AccountMetacentersResponse struct {
	Items []*Metacenter `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *AccountMetacentersResponse) Reset()                    { *m = AccountMetacentersResponse{} }
func (m *AccountMetacentersResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountMetacentersResponse) ProtoMessage()               {}
func (*AccountMetacentersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountMetacentersResponse) GetItems() []*Metacenter {
	if m != nil {
		return m.Items
	}
	return nil
}

type AccountDatacentersRequest struct {
}

func (m *AccountDatacentersRequest) Reset()                    { *m = AccountDatacentersRequest{} }
func (m *AccountDatacentersRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountDatacentersRequest) ProtoMessage()               {}
func (*AccountDatacentersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AccountDatacentersResponse struct {
	Items []*Datacenter `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *AccountDatacentersResponse) Reset()                    { *m = AccountDatacentersResponse{} }
func (m *AccountDatacentersResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountDatacentersResponse) ProtoMessage()               {}
func (*AccountDatacentersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AccountDatacentersResponse) GetItems() []*Datacenter {
	if m != nil {
		return m.Items
	}
	return nil
}

type MetacenterCreateRequest struct {
}

func (m *MetacenterCreateRequest) Reset()                    { *m = MetacenterCreateRequest{} }
func (m *MetacenterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*MetacenterCreateRequest) ProtoMessage()               {}
func (*MetacenterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type MetacenterCreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MetacenterCreateResponse) Reset()                    { *m = MetacenterCreateResponse{} }
func (m *MetacenterCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*MetacenterCreateResponse) ProtoMessage()               {}
func (*MetacenterCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MetacenterCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MetacenterDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MetacenterDeleteRequest) Reset()                    { *m = MetacenterDeleteRequest{} }
func (m *MetacenterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*MetacenterDeleteRequest) ProtoMessage()               {}
func (*MetacenterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MetacenterDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MetacenterDeleteResponse struct {
}

func (m *MetacenterDeleteResponse) Reset()                    { *m = MetacenterDeleteResponse{} }
func (m *MetacenterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*MetacenterDeleteResponse) ProtoMessage()               {}
func (*MetacenterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DatacenterCreateRequest struct {
}

func (m *DatacenterCreateRequest) Reset()                    { *m = DatacenterCreateRequest{} }
func (m *DatacenterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*DatacenterCreateRequest) ProtoMessage()               {}
func (*DatacenterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type DatacenterCreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DatacenterCreateResponse) Reset()                    { *m = DatacenterCreateResponse{} }
func (m *DatacenterCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*DatacenterCreateResponse) ProtoMessage()               {}
func (*DatacenterCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DatacenterCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DatacenterUpdateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DatacenterUpdateRequest) Reset()                    { *m = DatacenterUpdateRequest{} }
func (m *DatacenterUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*DatacenterUpdateRequest) ProtoMessage()               {}
func (*DatacenterUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DatacenterUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DatacenterUpdateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DatacenterUpdateResponse) Reset()                    { *m = DatacenterUpdateResponse{} }
func (m *DatacenterUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*DatacenterUpdateResponse) ProtoMessage()               {}
func (*DatacenterUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DatacenterUpdateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DatacenterDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DatacenterDeleteRequest) Reset()                    { *m = DatacenterDeleteRequest{} }
func (m *DatacenterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DatacenterDeleteRequest) ProtoMessage()               {}
func (*DatacenterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DatacenterDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DatacenterDeleteResponse struct {
}

func (m *DatacenterDeleteResponse) Reset()                    { *m = DatacenterDeleteResponse{} }
func (m *DatacenterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DatacenterDeleteResponse) ProtoMessage()               {}
func (*DatacenterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type DatacenterMatchRequest struct {
}

func (m *DatacenterMatchRequest) Reset()                    { *m = DatacenterMatchRequest{} }
func (m *DatacenterMatchRequest) String() string            { return proto.CompactTextString(m) }
func (*DatacenterMatchRequest) ProtoMessage()               {}
func (*DatacenterMatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type DatacenterMatchResponse struct {
	Items []*Datacenter `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *DatacenterMatchResponse) Reset()                    { *m = DatacenterMatchResponse{} }
func (m *DatacenterMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*DatacenterMatchResponse) ProtoMessage()               {}
func (*DatacenterMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DatacenterMatchResponse) GetItems() []*Datacenter {
	if m != nil {
		return m.Items
	}
	return nil
}

type Datacenter struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *Datacenter) Reset()                    { *m = Datacenter{} }
func (m *Datacenter) String() string            { return proto.CompactTextString(m) }
func (*Datacenter) ProtoMessage()               {}
func (*Datacenter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Datacenter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Datacenter) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Datacenter) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Metacenter struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	State    string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *Metacenter) Reset()                    { *m = Metacenter{} }
func (m *Metacenter) String() string            { return proto.CompactTextString(m) }
func (*Metacenter) ProtoMessage()               {}
func (*Metacenter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Metacenter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Metacenter) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Metacenter) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountCreateRequest)(nil), "AccountCreateRequest")
	proto.RegisterType((*AccountCreateResponse)(nil), "AccountCreateResponse")
	proto.RegisterType((*AccountMetacentersRequest)(nil), "AccountMetacentersRequest")
	proto.RegisterType((*AccountMetacentersResponse)(nil), "AccountMetacentersResponse")
	proto.RegisterType((*AccountDatacentersRequest)(nil), "AccountDatacentersRequest")
	proto.RegisterType((*AccountDatacentersResponse)(nil), "AccountDatacentersResponse")
	proto.RegisterType((*MetacenterCreateRequest)(nil), "MetacenterCreateRequest")
	proto.RegisterType((*MetacenterCreateResponse)(nil), "MetacenterCreateResponse")
	proto.RegisterType((*MetacenterDeleteRequest)(nil), "MetacenterDeleteRequest")
	proto.RegisterType((*MetacenterDeleteResponse)(nil), "MetacenterDeleteResponse")
	proto.RegisterType((*DatacenterCreateRequest)(nil), "DatacenterCreateRequest")
	proto.RegisterType((*DatacenterCreateResponse)(nil), "DatacenterCreateResponse")
	proto.RegisterType((*DatacenterUpdateRequest)(nil), "DatacenterUpdateRequest")
	proto.RegisterType((*DatacenterUpdateResponse)(nil), "DatacenterUpdateResponse")
	proto.RegisterType((*DatacenterDeleteRequest)(nil), "DatacenterDeleteRequest")
	proto.RegisterType((*DatacenterDeleteResponse)(nil), "DatacenterDeleteResponse")
	proto.RegisterType((*DatacenterMatchRequest)(nil), "DatacenterMatchRequest")
	proto.RegisterType((*DatacenterMatchResponse)(nil), "DatacenterMatchResponse")
	proto.RegisterType((*Datacenter)(nil), "Datacenter")
	proto.RegisterType((*Metacenter)(nil), "Metacenter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	// Create new Account and return identity bundle.
	AccountCreate(ctx context.Context, in *AccountCreateRequest, opts ...grpc.CallOption) (*AccountCreateResponse, error)
	// List all Metacenters owned by caller (user).
	AccountMetacenters(ctx context.Context, in *AccountMetacentersRequest, opts ...grpc.CallOption) (*AccountMetacentersResponse, error)
	// List all Datacenters owned by caller (provider)
	AccountDatacenters(ctx context.Context, in *AccountDatacentersRequest, opts ...grpc.CallOption) (*AccountDatacentersResponse, error)
	// Create Metacenter which will be owned by caller (user).
	MetacenterCreate(ctx context.Context, in *MetacenterCreateRequest, opts ...grpc.CallOption) (*MetacenterCreateResponse, error)
	// Delete Metacenter owned by caller (user).
	MetacenterDelete(ctx context.Context, in *MetacenterDeleteRequest, opts ...grpc.CallOption) (*MetacenterDeleteResponse, error)
	// Create Datacenter owned by caller (provider).
	DatacenterCreate(ctx context.Context, in *DatacenterCreateRequest, opts ...grpc.CallOption) (*DatacenterCreateResponse, error)
	// Update Datacenter owned by caller (provider).
	DatacenterUpdate(ctx context.Context, in *DatacenterUpdateRequest, opts ...grpc.CallOption) (*DatacenterUpdateResponse, error)
	// Delete Datacenter owned by caller (provider).
	DatacenterDelete(ctx context.Context, in *DatacenterDeleteRequest, opts ...grpc.CallOption) (*DatacenterDeleteResponse, error)
	// Match Datacenters for given request.
	DatacenterMatch(ctx context.Context, in *DatacenterMatchRequest, opts ...grpc.CallOption) (*DatacenterMatchResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) AccountCreate(ctx context.Context, in *AccountCreateRequest, opts ...grpc.CallOption) (*AccountCreateResponse, error) {
	out := new(AccountCreateResponse)
	err := grpc.Invoke(ctx, "/Registry/AccountCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AccountMetacenters(ctx context.Context, in *AccountMetacentersRequest, opts ...grpc.CallOption) (*AccountMetacentersResponse, error) {
	out := new(AccountMetacentersResponse)
	err := grpc.Invoke(ctx, "/Registry/AccountMetacenters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AccountDatacenters(ctx context.Context, in *AccountDatacentersRequest, opts ...grpc.CallOption) (*AccountDatacentersResponse, error) {
	out := new(AccountDatacentersResponse)
	err := grpc.Invoke(ctx, "/Registry/AccountDatacenters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MetacenterCreate(ctx context.Context, in *MetacenterCreateRequest, opts ...grpc.CallOption) (*MetacenterCreateResponse, error) {
	out := new(MetacenterCreateResponse)
	err := grpc.Invoke(ctx, "/Registry/MetacenterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) MetacenterDelete(ctx context.Context, in *MetacenterDeleteRequest, opts ...grpc.CallOption) (*MetacenterDeleteResponse, error) {
	out := new(MetacenterDeleteResponse)
	err := grpc.Invoke(ctx, "/Registry/MetacenterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DatacenterCreate(ctx context.Context, in *DatacenterCreateRequest, opts ...grpc.CallOption) (*DatacenterCreateResponse, error) {
	out := new(DatacenterCreateResponse)
	err := grpc.Invoke(ctx, "/Registry/DatacenterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DatacenterUpdate(ctx context.Context, in *DatacenterUpdateRequest, opts ...grpc.CallOption) (*DatacenterUpdateResponse, error) {
	out := new(DatacenterUpdateResponse)
	err := grpc.Invoke(ctx, "/Registry/DatacenterUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DatacenterDelete(ctx context.Context, in *DatacenterDeleteRequest, opts ...grpc.CallOption) (*DatacenterDeleteResponse, error) {
	out := new(DatacenterDeleteResponse)
	err := grpc.Invoke(ctx, "/Registry/DatacenterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DatacenterMatch(ctx context.Context, in *DatacenterMatchRequest, opts ...grpc.CallOption) (*DatacenterMatchResponse, error) {
	out := new(DatacenterMatchResponse)
	err := grpc.Invoke(ctx, "/Registry/DatacenterMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	// Create new Account and return identity bundle.
	AccountCreate(context.Context, *AccountCreateRequest) (*AccountCreateResponse, error)
	// List all Metacenters owned by caller (user).
	AccountMetacenters(context.Context, *AccountMetacentersRequest) (*AccountMetacentersResponse, error)
	// List all Datacenters owned by caller (provider)
	AccountDatacenters(context.Context, *AccountDatacentersRequest) (*AccountDatacentersResponse, error)
	// Create Metacenter which will be owned by caller (user).
	MetacenterCreate(context.Context, *MetacenterCreateRequest) (*MetacenterCreateResponse, error)
	// Delete Metacenter owned by caller (user).
	MetacenterDelete(context.Context, *MetacenterDeleteRequest) (*MetacenterDeleteResponse, error)
	// Create Datacenter owned by caller (provider).
	DatacenterCreate(context.Context, *DatacenterCreateRequest) (*DatacenterCreateResponse, error)
	// Update Datacenter owned by caller (provider).
	DatacenterUpdate(context.Context, *DatacenterUpdateRequest) (*DatacenterUpdateResponse, error)
	// Delete Datacenter owned by caller (provider).
	DatacenterDelete(context.Context, *DatacenterDeleteRequest) (*DatacenterDeleteResponse, error)
	// Match Datacenters for given request.
	DatacenterMatch(context.Context, *DatacenterMatchRequest) (*DatacenterMatchResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccountCreate(ctx, req.(*AccountCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AccountMetacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMetacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccountMetacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/AccountMetacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccountMetacenters(ctx, req.(*AccountMetacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AccountDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccountDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/AccountDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccountDatacenters(ctx, req.(*AccountDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MetacenterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetacenterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MetacenterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/MetacenterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MetacenterCreate(ctx, req.(*MetacenterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_MetacenterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetacenterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).MetacenterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/MetacenterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).MetacenterDelete(ctx, req.(*MetacenterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DatacenterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatacenterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DatacenterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/DatacenterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DatacenterCreate(ctx, req.(*DatacenterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DatacenterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatacenterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DatacenterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/DatacenterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DatacenterUpdate(ctx, req.(*DatacenterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DatacenterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatacenterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DatacenterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/DatacenterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DatacenterDelete(ctx, req.(*DatacenterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DatacenterMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatacenterMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DatacenterMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/DatacenterMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DatacenterMatch(ctx, req.(*DatacenterMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountCreate",
			Handler:    _Registry_AccountCreate_Handler,
		},
		{
			MethodName: "AccountMetacenters",
			Handler:    _Registry_AccountMetacenters_Handler,
		},
		{
			MethodName: "AccountDatacenters",
			Handler:    _Registry_AccountDatacenters_Handler,
		},
		{
			MethodName: "MetacenterCreate",
			Handler:    _Registry_MetacenterCreate_Handler,
		},
		{
			MethodName: "MetacenterDelete",
			Handler:    _Registry_MetacenterDelete_Handler,
		},
		{
			MethodName: "DatacenterCreate",
			Handler:    _Registry_DatacenterCreate_Handler,
		},
		{
			MethodName: "DatacenterUpdate",
			Handler:    _Registry_DatacenterUpdate_Handler,
		},
		{
			MethodName: "DatacenterDelete",
			Handler:    _Registry_DatacenterDelete_Handler,
		},
		{
			MethodName: "DatacenterMatch",
			Handler:    _Registry_DatacenterMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/registry/registry.proto",
}

func init() { proto.RegisterFile("api/registry/registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcd, 0x8a, 0xdb, 0x30,
	0x10, 0x80, 0x49, 0xd2, 0x94, 0x74, 0x42, 0xdb, 0x20, 0xf2, 0x23, 0x2b, 0x97, 0xd4, 0xa7, 0xb4,
	0x14, 0x15, 0xd2, 0x6b, 0x69, 0x29, 0x0d, 0xf4, 0xe4, 0x1e, 0x0c, 0x7d, 0x00, 0xd5, 0x1e, 0xba,
	0x66, 0x13, 0xdb, 0x6b, 0x2b, 0x87, 0x3c, 0xcb, 0xbe, 0xec, 0x62, 0x5b, 0x8e, 0x2c, 0xdb, 0xca,
	0x06, 0xf6, 0x26, 0x69, 0x86, 0x4f, 0x33, 0xd6, 0x7c, 0x18, 0xd6, 0x22, 0x8d, 0xbe, 0x64, 0xf8,
	0x3f, 0xca, 0x65, 0x76, 0xbe, 0x2c, 0x78, 0x9a, 0x25, 0x32, 0x71, 0x3f, 0xc3, 0xfc, 0x67, 0x10,
	0x24, 0xa7, 0x58, 0xfe, 0xca, 0x50, 0x48, 0xf4, 0xf1, 0xe1, 0x84, 0xb9, 0x24, 0x73, 0x18, 0xe3,
	0x51, 0x44, 0x07, 0x3a, 0xd8, 0x0c, 0xb6, 0x6f, 0xfc, 0x6a, 0xe3, 0x7a, 0xb0, 0x68, 0x65, 0xe7,
	0x69, 0x12, 0xe7, 0x48, 0xde, 0xc1, 0x30, 0x0a, 0x55, 0xee, 0x30, 0x0a, 0x09, 0x81, 0x57, 0x01,
	0x66, 0x92, 0x0e, 0xcb, 0x93, 0x72, 0x4d, 0x66, 0x30, 0xba, 0xc7, 0x33, 0x1d, 0x95, 0x47, 0xc5,
	0xd2, 0x5d, 0x83, 0xa3, 0x70, 0x1e, 0x4a, 0x11, 0x60, 0x2c, 0x31, 0xcb, 0x55, 0x05, 0xee, 0x0f,
	0x60, 0x7d, 0x41, 0x75, 0xe1, 0x07, 0x18, 0x47, 0x12, 0x8f, 0x39, 0x1d, 0x6c, 0x46, 0xdb, 0xe9,
	0x6e, 0xca, 0x75, 0x92, 0x5f, 0x45, 0x1a, 0xf4, 0xbd, 0xb8, 0x42, 0x37, 0x82, 0x36, 0xba, 0x4e,
	0xaa, 0xe9, 0x0e, 0xac, 0xf4, 0x95, 0xc6, 0xb7, 0x73, 0x3f, 0x01, 0xed, 0x86, 0xfa, 0x3f, 0x94,
	0xfb, 0xb1, 0x89, 0xd9, 0xe3, 0x01, 0xf5, 0x13, 0xb4, 0x53, 0x59, 0x13, 0x5b, 0xa7, 0x56, 0xd8,
	0xa2, 0x1a, 0x5d, 0x62, 0xa7, 0x9a, 0x6e, 0xc8, 0x5e, 0x8d, 0xce, 0xfd, 0x9b, 0x86, 0xc2, 0x5e,
	0x8d, 0x81, 0xad, 0x53, 0x6f, 0xc1, 0x3e, 0xdb, 0x64, 0x37, 0x55, 0x35, 0x49, 0x61, 0xa9, 0x63,
	0x9e, 0x90, 0xc1, 0x5d, 0xdd, 0xe3, 0xb7, 0xe6, 0x05, 0x2a, 0x72, 0xfb, 0x53, 0xfe, 0x01, 0xd0,
	0x87, 0x9d, 0x51, 0x66, 0x30, 0xc1, 0x38, 0x4c, 0x93, 0x28, 0xae, 0xc7, 0xf9, 0xb2, 0x2f, 0x2c,
	0xc9, 0xa5, 0x90, 0xa8, 0x86, 0xba, 0xda, 0x14, 0x3c, 0xfd, 0x50, 0x2f, 0xe7, 0xed, 0x1e, 0xc7,
	0x30, 0xf1, 0x95, 0xb6, 0xe4, 0x3b, 0xbc, 0x35, 0x14, 0x24, 0x0b, 0xde, 0x27, 0x30, 0x5b, 0xf2,
	0x7e, 0x53, 0x3d, 0x20, 0x5d, 0xad, 0x08, 0xe3, 0x56, 0x11, 0xd9, 0x9a, 0x5f, 0xf1, 0x50, 0xe3,
	0x1a, 0x1e, 0x69, 0x5c, 0xd7, 0x3c, 0x8d, 0xeb, 0x13, 0xef, 0x37, 0xcc, 0xda, 0xea, 0x10, 0xca,
	0x2d, 0xa2, 0x31, 0x87, 0x5b, 0x3d, 0x33, 0x40, 0xd5, 0x1c, 0x19, 0x20, 0x63, 0x0a, 0x0d, 0x90,
	0x39, 0x74, 0x05, 0xa8, 0xad, 0x0f, 0xa1, 0xdc, 0x22, 0x1b, 0x73, 0xb8, 0xd5, 0x35, 0x03, 0x54,
	0x09, 0x63, 0x80, 0x0c, 0xdd, 0x0c, 0x50, 0xcb, 0x2e, 0x03, 0x74, 0x69, 0xcd, 0x22, 0x98, 0x01,
	0x6a, 0xb5, 0xb6, 0x87, 0xf7, 0x2d, 0x6b, 0xc8, 0x8a, 0xf7, 0x1b, 0xc6, 0x28, 0xb7, 0x08, 0xf6,
	0xef, 0x75, 0xf9, 0x23, 0xf9, 0xfa, 0x14, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x6c, 0xe2, 0x63, 0x67,
	0x06, 0x00, 0x00,
}
